// Code generated by protoc-gen-go. DO NOT EDIT.
// source: grpc/taskManagerRPC/taskManager.proto

/*
Package taskManager is a generated protocol buffer package.

It is generated from these files:
	grpc/taskManagerRPC/taskManager.proto

It has these top-level messages:
	CreateTaskReq
	QueryUserTasksReq
	AcceptTaskReq
	ChooseTaskResponserReq
	FulfilTaskReq
	EvaluateAndFinishTaskReq
	TaskManagerRespComm
	CreateTaskResp
	QueryUserTasksResp
	AcceptTaskResp
	ChooseTaskResponserResp
	FulfilTaskResp
	EvaluateAndFinishTaskResp
*/
package taskManager

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import comm "external/comm"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CreateTaskReq struct {
	CreateInfo *comm.TaskCreateInfo `protobuf:"bytes,1,opt,name=createInfo" json:"createInfo,omitempty"`
}

func (m *CreateTaskReq) Reset()                    { *m = CreateTaskReq{} }
func (m *CreateTaskReq) String() string            { return proto.CompactTextString(m) }
func (*CreateTaskReq) ProtoMessage()               {}
func (*CreateTaskReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CreateTaskReq) GetCreateInfo() *comm.TaskCreateInfo {
	if m != nil {
		return m.CreateInfo
	}
	return nil
}

type QueryUserTasksReq struct {
	UserID uint32 `protobuf:"varint,1,opt,name=userID" json:"userID,omitempty"`
}

func (m *QueryUserTasksReq) Reset()                    { *m = QueryUserTasksReq{} }
func (m *QueryUserTasksReq) String() string            { return proto.CompactTextString(m) }
func (*QueryUserTasksReq) ProtoMessage()               {}
func (*QueryUserTasksReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *QueryUserTasksReq) GetUserID() uint32 {
	if m != nil {
		return m.UserID
	}
	return 0
}

type AcceptTaskReq struct {
	TaskID      uint64 `protobuf:"varint,1,opt,name=taskID" json:"taskID,omitempty"`
	ResponserID uint32 `protobuf:"varint,2,opt,name=responserID" json:"responserID,omitempty"`
	Decision    int32  `protobuf:"varint,3,opt,name=Decision,json=decision" json:"Decision,omitempty"`
}

func (m *AcceptTaskReq) Reset()                    { *m = AcceptTaskReq{} }
func (m *AcceptTaskReq) String() string            { return proto.CompactTextString(m) }
func (*AcceptTaskReq) ProtoMessage()               {}
func (*AcceptTaskReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *AcceptTaskReq) GetTaskID() uint64 {
	if m != nil {
		return m.TaskID
	}
	return 0
}

func (m *AcceptTaskReq) GetResponserID() uint32 {
	if m != nil {
		return m.ResponserID
	}
	return 0
}

func (m *AcceptTaskReq) GetDecision() int32 {
	if m != nil {
		return m.Decision
	}
	return 0
}

type ChooseTaskResponserReq struct {
	TaskID           uint64 `protobuf:"varint,1,opt,name=taskID" json:"taskID,omitempty"`
	ChoseResponserID uint32 `protobuf:"varint,2,opt,name=choseResponserID" json:"choseResponserID,omitempty"`
}

func (m *ChooseTaskResponserReq) Reset()                    { *m = ChooseTaskResponserReq{} }
func (m *ChooseTaskResponserReq) String() string            { return proto.CompactTextString(m) }
func (*ChooseTaskResponserReq) ProtoMessage()               {}
func (*ChooseTaskResponserReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ChooseTaskResponserReq) GetTaskID() uint64 {
	if m != nil {
		return m.TaskID
	}
	return 0
}

func (m *ChooseTaskResponserReq) GetChoseResponserID() uint32 {
	if m != nil {
		return m.ChoseResponserID
	}
	return 0
}

type FulfilTaskReq struct {
	TaskID      uint64 `protobuf:"varint,1,opt,name=taskID" json:"taskID,omitempty"`
	ResponserID uint32 `protobuf:"varint,2,opt,name=responserID" json:"responserID,omitempty"`
}

func (m *FulfilTaskReq) Reset()                    { *m = FulfilTaskReq{} }
func (m *FulfilTaskReq) String() string            { return proto.CompactTextString(m) }
func (*FulfilTaskReq) ProtoMessage()               {}
func (*FulfilTaskReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *FulfilTaskReq) GetTaskID() uint64 {
	if m != nil {
		return m.TaskID
	}
	return 0
}

func (m *FulfilTaskReq) GetResponserID() uint32 {
	if m != nil {
		return m.ResponserID
	}
	return 0
}

type EvaluateAndFinishTaskReq struct {
	TaskID      uint64 `protobuf:"varint,1,opt,name=taskID" json:"taskID,omitempty"`
	RequesterID uint32 `protobuf:"varint,2,opt,name=requesterID" json:"requesterID,omitempty"`
}

func (m *EvaluateAndFinishTaskReq) Reset()                    { *m = EvaluateAndFinishTaskReq{} }
func (m *EvaluateAndFinishTaskReq) String() string            { return proto.CompactTextString(m) }
func (*EvaluateAndFinishTaskReq) ProtoMessage()               {}
func (*EvaluateAndFinishTaskReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *EvaluateAndFinishTaskReq) GetTaskID() uint64 {
	if m != nil {
		return m.TaskID
	}
	return 0
}

func (m *EvaluateAndFinishTaskReq) GetRequesterID() uint32 {
	if m != nil {
		return m.RequesterID
	}
	return 0
}

type TaskManagerRespComm struct {
	ErrorCode int32  `protobuf:"varint,1,opt,name=ErrorCode,json=errorCode" json:"ErrorCode,omitempty"`
	ErrorMsg  string `protobuf:"bytes,2,opt,name=ErrorMsg,json=errorMsg" json:"ErrorMsg,omitempty"`
}

func (m *TaskManagerRespComm) Reset()                    { *m = TaskManagerRespComm{} }
func (m *TaskManagerRespComm) String() string            { return proto.CompactTextString(m) }
func (*TaskManagerRespComm) ProtoMessage()               {}
func (*TaskManagerRespComm) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *TaskManagerRespComm) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *TaskManagerRespComm) GetErrorMsg() string {
	if m != nil {
		return m.ErrorMsg
	}
	return ""
}

type CreateTaskResp struct {
	Comm *TaskManagerRespComm `protobuf:"bytes,1,opt,name=comm" json:"comm,omitempty"`
}

func (m *CreateTaskResp) Reset()                    { *m = CreateTaskResp{} }
func (m *CreateTaskResp) String() string            { return proto.CompactTextString(m) }
func (*CreateTaskResp) ProtoMessage()               {}
func (*CreateTaskResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *CreateTaskResp) GetComm() *TaskManagerRespComm {
	if m != nil {
		return m.Comm
	}
	return nil
}

type QueryUserTasksResp struct {
	Comm  *TaskManagerRespComm      `protobuf:"bytes,1,opt,name=comm" json:"comm,omitempty"`
	Tasks []*comm.TaskInfoWithUsers `protobuf:"bytes,2,rep,name=tasks" json:"tasks,omitempty"`
}

func (m *QueryUserTasksResp) Reset()                    { *m = QueryUserTasksResp{} }
func (m *QueryUserTasksResp) String() string            { return proto.CompactTextString(m) }
func (*QueryUserTasksResp) ProtoMessage()               {}
func (*QueryUserTasksResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *QueryUserTasksResp) GetComm() *TaskManagerRespComm {
	if m != nil {
		return m.Comm
	}
	return nil
}

func (m *QueryUserTasksResp) GetTasks() []*comm.TaskInfoWithUsers {
	if m != nil {
		return m.Tasks
	}
	return nil
}

type AcceptTaskResp struct {
	Comm *TaskManagerRespComm `protobuf:"bytes,1,opt,name=comm" json:"comm,omitempty"`
}

func (m *AcceptTaskResp) Reset()                    { *m = AcceptTaskResp{} }
func (m *AcceptTaskResp) String() string            { return proto.CompactTextString(m) }
func (*AcceptTaskResp) ProtoMessage()               {}
func (*AcceptTaskResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *AcceptTaskResp) GetComm() *TaskManagerRespComm {
	if m != nil {
		return m.Comm
	}
	return nil
}

type ChooseTaskResponserResp struct {
	Comm *TaskManagerRespComm `protobuf:"bytes,1,opt,name=comm" json:"comm,omitempty"`
}

func (m *ChooseTaskResponserResp) Reset()                    { *m = ChooseTaskResponserResp{} }
func (m *ChooseTaskResponserResp) String() string            { return proto.CompactTextString(m) }
func (*ChooseTaskResponserResp) ProtoMessage()               {}
func (*ChooseTaskResponserResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *ChooseTaskResponserResp) GetComm() *TaskManagerRespComm {
	if m != nil {
		return m.Comm
	}
	return nil
}

type FulfilTaskResp struct {
	Comm *TaskManagerRespComm `protobuf:"bytes,1,opt,name=comm" json:"comm,omitempty"`
}

func (m *FulfilTaskResp) Reset()                    { *m = FulfilTaskResp{} }
func (m *FulfilTaskResp) String() string            { return proto.CompactTextString(m) }
func (*FulfilTaskResp) ProtoMessage()               {}
func (*FulfilTaskResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *FulfilTaskResp) GetComm() *TaskManagerRespComm {
	if m != nil {
		return m.Comm
	}
	return nil
}

type EvaluateAndFinishTaskResp struct {
	Comm *TaskManagerRespComm `protobuf:"bytes,1,opt,name=comm" json:"comm,omitempty"`
}

func (m *EvaluateAndFinishTaskResp) Reset()                    { *m = EvaluateAndFinishTaskResp{} }
func (m *EvaluateAndFinishTaskResp) String() string            { return proto.CompactTextString(m) }
func (*EvaluateAndFinishTaskResp) ProtoMessage()               {}
func (*EvaluateAndFinishTaskResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *EvaluateAndFinishTaskResp) GetComm() *TaskManagerRespComm {
	if m != nil {
		return m.Comm
	}
	return nil
}

func init() {
	proto.RegisterType((*CreateTaskReq)(nil), "CreateTaskReq")
	proto.RegisterType((*QueryUserTasksReq)(nil), "QueryUserTasksReq")
	proto.RegisterType((*AcceptTaskReq)(nil), "AcceptTaskReq")
	proto.RegisterType((*ChooseTaskResponserReq)(nil), "ChooseTaskResponserReq")
	proto.RegisterType((*FulfilTaskReq)(nil), "FulfilTaskReq")
	proto.RegisterType((*EvaluateAndFinishTaskReq)(nil), "EvaluateAndFinishTaskReq")
	proto.RegisterType((*TaskManagerRespComm)(nil), "TaskManagerRespComm")
	proto.RegisterType((*CreateTaskResp)(nil), "CreateTaskResp")
	proto.RegisterType((*QueryUserTasksResp)(nil), "QueryUserTasksResp")
	proto.RegisterType((*AcceptTaskResp)(nil), "AcceptTaskResp")
	proto.RegisterType((*ChooseTaskResponserResp)(nil), "ChooseTaskResponserResp")
	proto.RegisterType((*FulfilTaskResp)(nil), "FulfilTaskResp")
	proto.RegisterType((*EvaluateAndFinishTaskResp)(nil), "EvaluateAndFinishTaskResp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for TaskManager service

type TaskManagerClient interface {
	CreateTask(ctx context.Context, in *CreateTaskReq, opts ...grpc.CallOption) (*CreateTaskResp, error)
	QueryUserTasks(ctx context.Context, in *QueryUserTasksReq, opts ...grpc.CallOption) (*QueryUserTasksResp, error)
	AcceptTask(ctx context.Context, in *AcceptTaskReq, opts ...grpc.CallOption) (*AcceptTaskResp, error)
	ChooseTaskResponser(ctx context.Context, in *ChooseTaskResponserReq, opts ...grpc.CallOption) (*ChooseTaskResponserResp, error)
	FulfilTask(ctx context.Context, in *FulfilTaskReq, opts ...grpc.CallOption) (*FulfilTaskResp, error)
	EvaluateAndFinishTask(ctx context.Context, in *EvaluateAndFinishTaskReq, opts ...grpc.CallOption) (*EvaluateAndFinishTaskResp, error)
}

type taskManagerClient struct {
	cc *grpc.ClientConn
}

func NewTaskManagerClient(cc *grpc.ClientConn) TaskManagerClient {
	return &taskManagerClient{cc}
}

func (c *taskManagerClient) CreateTask(ctx context.Context, in *CreateTaskReq, opts ...grpc.CallOption) (*CreateTaskResp, error) {
	out := new(CreateTaskResp)
	err := grpc.Invoke(ctx, "/TaskManager/CreateTask", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskManagerClient) QueryUserTasks(ctx context.Context, in *QueryUserTasksReq, opts ...grpc.CallOption) (*QueryUserTasksResp, error) {
	out := new(QueryUserTasksResp)
	err := grpc.Invoke(ctx, "/TaskManager/QueryUserTasks", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskManagerClient) AcceptTask(ctx context.Context, in *AcceptTaskReq, opts ...grpc.CallOption) (*AcceptTaskResp, error) {
	out := new(AcceptTaskResp)
	err := grpc.Invoke(ctx, "/TaskManager/AcceptTask", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskManagerClient) ChooseTaskResponser(ctx context.Context, in *ChooseTaskResponserReq, opts ...grpc.CallOption) (*ChooseTaskResponserResp, error) {
	out := new(ChooseTaskResponserResp)
	err := grpc.Invoke(ctx, "/TaskManager/ChooseTaskResponser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskManagerClient) FulfilTask(ctx context.Context, in *FulfilTaskReq, opts ...grpc.CallOption) (*FulfilTaskResp, error) {
	out := new(FulfilTaskResp)
	err := grpc.Invoke(ctx, "/TaskManager/FulfilTask", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskManagerClient) EvaluateAndFinishTask(ctx context.Context, in *EvaluateAndFinishTaskReq, opts ...grpc.CallOption) (*EvaluateAndFinishTaskResp, error) {
	out := new(EvaluateAndFinishTaskResp)
	err := grpc.Invoke(ctx, "/TaskManager/EvaluateAndFinishTask", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TaskManager service

type TaskManagerServer interface {
	CreateTask(context.Context, *CreateTaskReq) (*CreateTaskResp, error)
	QueryUserTasks(context.Context, *QueryUserTasksReq) (*QueryUserTasksResp, error)
	AcceptTask(context.Context, *AcceptTaskReq) (*AcceptTaskResp, error)
	ChooseTaskResponser(context.Context, *ChooseTaskResponserReq) (*ChooseTaskResponserResp, error)
	FulfilTask(context.Context, *FulfilTaskReq) (*FulfilTaskResp, error)
	EvaluateAndFinishTask(context.Context, *EvaluateAndFinishTaskReq) (*EvaluateAndFinishTaskResp, error)
}

func RegisterTaskManagerServer(s *grpc.Server, srv TaskManagerServer) {
	s.RegisterService(&_TaskManager_serviceDesc, srv)
}

func _TaskManager_CreateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskManagerServer).CreateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TaskManager/CreateTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskManagerServer).CreateTask(ctx, req.(*CreateTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskManager_QueryUserTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUserTasksReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskManagerServer).QueryUserTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TaskManager/QueryUserTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskManagerServer).QueryUserTasks(ctx, req.(*QueryUserTasksReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskManager_AcceptTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskManagerServer).AcceptTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TaskManager/AcceptTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskManagerServer).AcceptTask(ctx, req.(*AcceptTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskManager_ChooseTaskResponser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChooseTaskResponserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskManagerServer).ChooseTaskResponser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TaskManager/ChooseTaskResponser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskManagerServer).ChooseTaskResponser(ctx, req.(*ChooseTaskResponserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskManager_FulfilTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FulfilTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskManagerServer).FulfilTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TaskManager/FulfilTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskManagerServer).FulfilTask(ctx, req.(*FulfilTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskManager_EvaluateAndFinishTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvaluateAndFinishTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskManagerServer).EvaluateAndFinishTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TaskManager/EvaluateAndFinishTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskManagerServer).EvaluateAndFinishTask(ctx, req.(*EvaluateAndFinishTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _TaskManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "TaskManager",
	HandlerType: (*TaskManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTask",
			Handler:    _TaskManager_CreateTask_Handler,
		},
		{
			MethodName: "QueryUserTasks",
			Handler:    _TaskManager_QueryUserTasks_Handler,
		},
		{
			MethodName: "AcceptTask",
			Handler:    _TaskManager_AcceptTask_Handler,
		},
		{
			MethodName: "ChooseTaskResponser",
			Handler:    _TaskManager_ChooseTaskResponser_Handler,
		},
		{
			MethodName: "FulfilTask",
			Handler:    _TaskManager_FulfilTask_Handler,
		},
		{
			MethodName: "EvaluateAndFinishTask",
			Handler:    _TaskManager_EvaluateAndFinishTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/taskManagerRPC/taskManager.proto",
}

func init() { proto.RegisterFile("grpc/taskManagerRPC/taskManager.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 509 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xa4, 0x54, 0x41, 0x6b, 0xdb, 0x30,
	0x14, 0x76, 0xd2, 0x26, 0x24, 0x2f, 0xc4, 0xde, 0x94, 0x2d, 0x75, 0xcd, 0x0e, 0x41, 0x30, 0x30,
	0x1b, 0x28, 0x90, 0xdd, 0xba, 0xcb, 0x8a, 0x9b, 0x42, 0x06, 0x65, 0x9d, 0xc8, 0xd8, 0x65, 0x17,
	0xcf, 0x79, 0x8d, 0x4d, 0x13, 0xcb, 0x95, 0xec, 0xc1, 0x7e, 0xfb, 0x2e, 0x43, 0x8e, 0xdb, 0xd8,
	0x8b, 0x33, 0x66, 0x76, 0x31, 0xbc, 0x4f, 0x4f, 0xdf, 0x93, 0xf4, 0x7d, 0x9f, 0xe1, 0xf5, 0x5a,
	0x26, 0xc1, 0x34, 0xf5, 0xd5, 0xfd, 0x8d, 0x1f, 0xfb, 0x6b, 0x94, 0xfc, 0xd6, 0x2b, 0x97, 0x2c,
	0x91, 0x22, 0x15, 0x8e, 0x15, 0x88, 0xed, 0x76, 0xaa, 0x3f, 0x3b, 0x80, 0x7e, 0x80, 0xa1, 0x27,
	0xd1, 0x4f, 0x71, 0xe9, 0xab, 0x7b, 0x8e, 0x0f, 0x64, 0x0a, 0x10, 0xe4, 0xc0, 0x22, 0xbe, 0x13,
	0x76, 0x6b, 0xd2, 0x72, 0x07, 0x33, 0x8b, 0xe9, 0x55, 0xef, 0x09, 0xe6, 0xa5, 0x16, 0xfa, 0x16,
	0x9e, 0x7f, 0xce, 0x50, 0xfe, 0xfc, 0xa2, 0x50, 0xea, 0x36, 0xa5, 0x59, 0xc6, 0xd0, 0xcd, 0x14,
	0xca, 0xc5, 0x55, 0xce, 0x30, 0xe4, 0x45, 0x45, 0x11, 0x86, 0x97, 0x41, 0x80, 0x49, 0xfa, 0x38,
	0x6e, 0x0c, 0x5d, 0x7d, 0xca, 0xa2, 0xf1, 0x94, 0x17, 0x15, 0x99, 0xc0, 0x40, 0xa2, 0x4a, 0x44,
	0xbc, 0x63, 0x69, 0xe7, 0x2c, 0x65, 0x88, 0x38, 0xd0, 0xbb, 0xc2, 0x20, 0x52, 0x91, 0x88, 0xed,
	0x93, 0x49, 0xcb, 0xed, 0xf0, 0xde, 0xaa, 0xa8, 0xe9, 0x37, 0x18, 0x7b, 0xa1, 0x10, 0xaa, 0xb8,
	0x55, 0xb1, 0xe9, 0x6f, 0xf3, 0xde, 0xc0, 0xb3, 0x20, 0x14, 0x0a, 0xf9, 0xc1, 0xd0, 0x03, 0x9c,
	0x2e, 0x60, 0x78, 0x9d, 0x6d, 0xee, 0xa2, 0xcd, 0x7f, 0x5f, 0x82, 0x2e, 0xc1, 0x9e, 0xff, 0xf0,
	0x37, 0x99, 0x9f, 0xe2, 0x65, 0xbc, 0xba, 0x8e, 0xe2, 0x48, 0x85, 0xff, 0xc4, 0xfa, 0x90, 0xa1,
	0x4a, 0xab, 0xac, 0x4f, 0x10, 0xfd, 0x04, 0xa3, 0x65, 0xc9, 0x09, 0xa8, 0x12, 0x4f, 0x6c, 0xb7,
	0xe4, 0x15, 0xf4, 0xe7, 0x52, 0x0a, 0xe9, 0x89, 0x15, 0xe6, 0x9c, 0x1d, 0xde, 0xc7, 0x47, 0x40,
	0xbf, 0x67, 0xbe, 0x7a, 0xa3, 0xd6, 0x39, 0x67, 0x9f, 0xf7, 0xb0, 0xa8, 0xe9, 0x05, 0x98, 0x65,
	0x97, 0xa8, 0x84, 0xb8, 0x70, 0xaa, 0x5d, 0x54, 0x18, 0xe4, 0x05, 0xab, 0x99, 0xc7, 0xf3, 0x0e,
	0x1a, 0x02, 0xf9, 0xd3, 0x1f, 0x4d, 0xf6, 0x13, 0x17, 0x3a, 0xfa, 0xe2, 0xca, 0x6e, 0x4f, 0x4e,
	0xdc, 0xc1, 0x8c, 0xe4, 0xad, 0xda, 0x79, 0x5f, 0xa3, 0x34, 0xd4, 0xa4, 0x8a, 0xef, 0x1a, 0xf4,
	0x29, 0xcb, 0xe6, 0x6a, 0x74, 0x4a, 0x0f, 0xce, 0x6a, 0x1d, 0xd3, 0x88, 0xe4, 0x02, 0xcc, 0xb2,
	0x31, 0x1a, 0xed, 0x9d, 0xc3, 0xf9, 0x11, 0x27, 0x34, 0xa1, 0x99, 0xfd, 0x6a, 0xc3, 0xa0, 0xb4,
	0xaa, 0xe3, 0xbc, 0x57, 0x8e, 0x98, 0xac, 0x12, 0x76, 0xc7, 0x62, 0x55, 0x59, 0xa9, 0x41, 0xde,
	0x83, 0x59, 0x95, 0x8b, 0x10, 0x76, 0x90, 0x6f, 0x67, 0xc4, 0x0e, 0x35, 0xa5, 0x86, 0x9e, 0xb6,
	0x57, 0x80, 0x98, 0xac, 0x92, 0x75, 0xc7, 0x62, 0x55, 0x79, 0xa8, 0x41, 0x3e, 0xc2, 0xa8, 0xe6,
	0xd9, 0xc9, 0x19, 0xab, 0x8f, 0xaf, 0x63, 0xb3, 0x23, 0x2a, 0xed, 0x86, 0xef, 0x5f, 0x9f, 0x98,
	0xac, 0x92, 0x51, 0xc7, 0x62, 0x55, 0x69, 0xa8, 0x41, 0x6e, 0xe1, 0x65, 0xed, 0x93, 0x93, 0x73,
	0x76, 0x2c, 0x94, 0x8e, 0xc3, 0x8e, 0xaa, 0x44, 0x8d, 0xef, 0xdd, 0xfc, 0xa7, 0xfa, 0xee, 0x77,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xce, 0x7e, 0x39, 0x03, 0x8e, 0x05, 0x00, 0x00,
}
