// Code generated by protoc-gen-go. DO NOT EDIT.
// source: grpc/searchManagerRPC/searchManager.proto

/*
Package searchManager is a generated protocol buffer package.

It is generated from these files:
	grpc/searchManagerRPC/searchManager.proto

It has these top-level messages:
	SearchResponsersReq
	InsertUserRecordsReq
	SearchManagerRespComm
	SearchResponsersResp
	InsertUserRecordsResp
*/
package searchManager

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import comm "external/comm"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SearchResponsersReq struct {
	Task *comm.TaskInfo `protobuf:"bytes,1,opt,name=task" json:"task,omitempty"`
}

func (m *SearchResponsersReq) Reset()                    { *m = SearchResponsersReq{} }
func (m *SearchResponsersReq) String() string            { return proto.CompactTextString(m) }
func (*SearchResponsersReq) ProtoMessage()               {}
func (*SearchResponsersReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *SearchResponsersReq) GetTask() *comm.TaskInfo {
	if m != nil {
		return m.Task
	}
	return nil
}

type InsertUserRecordsReq struct {
	UserRecordNum int32            `protobuf:"varint,1,opt,name=userRecordNum" json:"userRecordNum,omitempty"`
	Users         []*comm.UserInfo `protobuf:"bytes,2,rep,name=users" json:"users,omitempty"`
}

func (m *InsertUserRecordsReq) Reset()                    { *m = InsertUserRecordsReq{} }
func (m *InsertUserRecordsReq) String() string            { return proto.CompactTextString(m) }
func (*InsertUserRecordsReq) ProtoMessage()               {}
func (*InsertUserRecordsReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *InsertUserRecordsReq) GetUserRecordNum() int32 {
	if m != nil {
		return m.UserRecordNum
	}
	return 0
}

func (m *InsertUserRecordsReq) GetUsers() []*comm.UserInfo {
	if m != nil {
		return m.Users
	}
	return nil
}

type SearchManagerRespComm struct {
	ErrorCode int32  `protobuf:"varint,1,opt,name=ErrorCode,json=errorCode" json:"ErrorCode,omitempty"`
	ErrorMsg  string `protobuf:"bytes,2,opt,name=ErrorMsg,json=errorMsg" json:"ErrorMsg,omitempty"`
}

func (m *SearchManagerRespComm) Reset()                    { *m = SearchManagerRespComm{} }
func (m *SearchManagerRespComm) String() string            { return proto.CompactTextString(m) }
func (*SearchManagerRespComm) ProtoMessage()               {}
func (*SearchManagerRespComm) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *SearchManagerRespComm) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *SearchManagerRespComm) GetErrorMsg() string {
	if m != nil {
		return m.ErrorMsg
	}
	return ""
}

type SearchResponsersResp struct {
	Comm *SearchManagerRespComm `protobuf:"bytes,1,opt,name=comm" json:"comm,omitempty"`
	Task *comm.TaskInfo         `protobuf:"bytes,2,opt,name=task" json:"task,omitempty"`
}

func (m *SearchResponsersResp) Reset()                    { *m = SearchResponsersResp{} }
func (m *SearchResponsersResp) String() string            { return proto.CompactTextString(m) }
func (*SearchResponsersResp) ProtoMessage()               {}
func (*SearchResponsersResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *SearchResponsersResp) GetComm() *SearchManagerRespComm {
	if m != nil {
		return m.Comm
	}
	return nil
}

func (m *SearchResponsersResp) GetTask() *comm.TaskInfo {
	if m != nil {
		return m.Task
	}
	return nil
}

type InsertUserRecordsResp struct {
	Comm *SearchManagerRespComm `protobuf:"bytes,1,opt,name=comm" json:"comm,omitempty"`
}

func (m *InsertUserRecordsResp) Reset()                    { *m = InsertUserRecordsResp{} }
func (m *InsertUserRecordsResp) String() string            { return proto.CompactTextString(m) }
func (*InsertUserRecordsResp) ProtoMessage()               {}
func (*InsertUserRecordsResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *InsertUserRecordsResp) GetComm() *SearchManagerRespComm {
	if m != nil {
		return m.Comm
	}
	return nil
}

func init() {
	proto.RegisterType((*SearchResponsersReq)(nil), "SearchResponsersReq")
	proto.RegisterType((*InsertUserRecordsReq)(nil), "InsertUserRecordsReq")
	proto.RegisterType((*SearchManagerRespComm)(nil), "SearchManagerRespComm")
	proto.RegisterType((*SearchResponsersResp)(nil), "SearchResponsersResp")
	proto.RegisterType((*InsertUserRecordsResp)(nil), "InsertUserRecordsResp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for SearchManager service

type SearchManagerClient interface {
	SearchResponsers(ctx context.Context, in *SearchResponsersReq, opts ...grpc.CallOption) (*SearchResponsersResp, error)
	InsertUserRecords(ctx context.Context, in *InsertUserRecordsReq, opts ...grpc.CallOption) (*InsertUserRecordsResp, error)
}

type searchManagerClient struct {
	cc *grpc.ClientConn
}

func NewSearchManagerClient(cc *grpc.ClientConn) SearchManagerClient {
	return &searchManagerClient{cc}
}

func (c *searchManagerClient) SearchResponsers(ctx context.Context, in *SearchResponsersReq, opts ...grpc.CallOption) (*SearchResponsersResp, error) {
	out := new(SearchResponsersResp)
	err := grpc.Invoke(ctx, "/SearchManager/SearchResponsers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchManagerClient) InsertUserRecords(ctx context.Context, in *InsertUserRecordsReq, opts ...grpc.CallOption) (*InsertUserRecordsResp, error) {
	out := new(InsertUserRecordsResp)
	err := grpc.Invoke(ctx, "/SearchManager/InsertUserRecords", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SearchManager service

type SearchManagerServer interface {
	SearchResponsers(context.Context, *SearchResponsersReq) (*SearchResponsersResp, error)
	InsertUserRecords(context.Context, *InsertUserRecordsReq) (*InsertUserRecordsResp, error)
}

func RegisterSearchManagerServer(s *grpc.Server, srv SearchManagerServer) {
	s.RegisterService(&_SearchManager_serviceDesc, srv)
}

func _SearchManager_SearchResponsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchResponsersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchManagerServer).SearchResponsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SearchManager/SearchResponsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchManagerServer).SearchResponsers(ctx, req.(*SearchResponsersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchManager_InsertUserRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertUserRecordsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchManagerServer).InsertUserRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SearchManager/InsertUserRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchManagerServer).InsertUserRecords(ctx, req.(*InsertUserRecordsReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _SearchManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "SearchManager",
	HandlerType: (*SearchManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchResponsers",
			Handler:    _SearchManager_SearchResponsers_Handler,
		},
		{
			MethodName: "InsertUserRecords",
			Handler:    _SearchManager_InsertUserRecords_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/searchManagerRPC/searchManager.proto",
}

func init() { proto.RegisterFile("grpc/searchManagerRPC/searchManager.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 304 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x92, 0xc1, 0x4a, 0xfb, 0x40,
	0x10, 0xc6, 0x9b, 0xfe, 0xdb, 0x3f, 0xcd, 0x48, 0x51, 0xd7, 0xa6, 0x84, 0xa0, 0x18, 0x16, 0x0f,
	0xd5, 0xc3, 0x16, 0xaa, 0x2f, 0x20, 0xd1, 0x43, 0x0f, 0x15, 0xdd, 0xea, 0xd1, 0xc3, 0x9a, 0x8e,
	0x11, 0x4a, 0xb2, 0x71, 0x27, 0x7d, 0x17, 0x1f, 0x57, 0xb2, 0x8d, 0x85, 0xd8, 0xbd, 0x78, 0x09,
	0xe4, 0xb7, 0xb3, 0xdf, 0xcc, 0xf7, 0xcd, 0xc2, 0x65, 0x66, 0xca, 0x74, 0x4a, 0xa8, 0x4c, 0xfa,
	0xb1, 0x50, 0x85, 0xca, 0xd0, 0xc8, 0xc7, 0xa4, 0x0d, 0x44, 0x69, 0x74, 0xa5, 0xa3, 0xc3, 0x54,
	0xe7, 0xf9, 0xb4, 0xfe, 0x6c, 0x01, 0xbf, 0x81, 0x93, 0xa5, 0xad, 0x93, 0x48, 0xa5, 0x2e, 0x08,
	0x0d, 0x49, 0xfc, 0x64, 0x67, 0xd0, 0xab, 0x14, 0xad, 0x43, 0x2f, 0xf6, 0x26, 0x07, 0x33, 0x5f,
	0x3c, 0x2b, 0x5a, 0xcf, 0x8b, 0x77, 0x2d, 0x2d, 0xe6, 0xaf, 0x30, 0x9a, 0xd7, 0xb5, 0xd5, 0x0b,
	0xa1, 0x91, 0x98, 0x6a, 0xb3, 0xb2, 0xd7, 0x2e, 0x60, 0xb8, 0xd9, 0x91, 0x87, 0x4d, 0x6e, 0xef,
	0xf7, 0x65, 0x1b, 0xb2, 0x73, 0xe8, 0xd7, 0x80, 0xc2, 0x6e, 0xfc, 0xcf, 0xaa, 0xd7, 0x2a, 0x56,
	0x7d, 0xcb, 0xf9, 0x13, 0x04, 0xcb, 0x96, 0x1b, 0xa4, 0x32, 0xd1, 0x79, 0xce, 0x4e, 0xc1, 0xbf,
	0x37, 0x46, 0x9b, 0x44, 0xaf, 0xb0, 0xd1, 0xf6, 0xf1, 0x07, 0xb0, 0x08, 0x06, 0xf6, 0x74, 0x41,
	0x59, 0xd8, 0x8d, 0xbd, 0x89, 0x2f, 0x07, 0xd8, 0xfc, 0x73, 0x05, 0xa3, 0x7d, 0x9f, 0x54, 0xb2,
	0x2b, 0xe8, 0xd5, 0x69, 0x34, 0x46, 0xc7, 0xc2, 0xd9, 0x57, 0xda, 0x9a, 0x5d, 0x28, 0x5d, 0x77,
	0x28, 0x09, 0x04, 0x8e, 0x50, 0xfe, 0xd6, 0x63, 0xf6, 0xe5, 0xc1, 0xb0, 0x75, 0xce, 0x6e, 0xe1,
	0xe8, 0xf7, 0xe4, 0x6c, 0x24, 0x1c, 0x4b, 0x8b, 0x02, 0xe1, 0xb2, 0xc8, 0x3b, 0xec, 0x0e, 0x8e,
	0xf7, 0x26, 0x63, 0x81, 0x70, 0xad, 0x30, 0x1a, 0x0b, 0xa7, 0x09, 0xde, 0x79, 0xfb, 0x6f, 0x5f,
	0xcc, 0xf5, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x8d, 0x77, 0xdd, 0x45, 0x6f, 0x02, 0x00, 0x00,
}
