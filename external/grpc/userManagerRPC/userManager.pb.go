// Code generated by protoc-gen-go. DO NOT EDIT.
// source: grpc/userManagerRPC/userManager.proto

/*
Package userManager is a generated protocol buffer package.

It is generated from these files:
	grpc/userManagerRPC/userManager.proto

It has these top-level messages:
	UserManagerRegisterReq
	UserManagerLoginReq
	UserManagerLogoutReq
	UserManagerAddUserInfoReq
	UserManagerRespComm
	UserManagerRegisterResp
	UserManagerLoginResp
	UserManagerLogoutResp
	UserManagerAddUserInfoResp
*/
package userManager

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import comm "external/comm"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type UserManagerRegisterReq struct {
	UserCheckInfo *comm.UserCheckInfo `protobuf:"bytes,1,opt,name=userCheckInfo" json:"userCheckInfo,omitempty"`
}

func (m *UserManagerRegisterReq) Reset()                    { *m = UserManagerRegisterReq{} }
func (m *UserManagerRegisterReq) String() string            { return proto.CompactTextString(m) }
func (*UserManagerRegisterReq) ProtoMessage()               {}
func (*UserManagerRegisterReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *UserManagerRegisterReq) GetUserCheckInfo() *comm.UserCheckInfo {
	if m != nil {
		return m.UserCheckInfo
	}
	return nil
}

type UserManagerLoginReq struct {
	UserCheckInfo *comm.UserCheckInfo `protobuf:"bytes,1,opt,name=userCheckInfo" json:"userCheckInfo,omitempty"`
}

func (m *UserManagerLoginReq) Reset()                    { *m = UserManagerLoginReq{} }
func (m *UserManagerLoginReq) String() string            { return proto.CompactTextString(m) }
func (*UserManagerLoginReq) ProtoMessage()               {}
func (*UserManagerLoginReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *UserManagerLoginReq) GetUserCheckInfo() *comm.UserCheckInfo {
	if m != nil {
		return m.UserCheckInfo
	}
	return nil
}

type UserManagerLogoutReq struct {
	UserCheckInfo *comm.UserCheckInfo `protobuf:"bytes,1,opt,name=userCheckInfo" json:"userCheckInfo,omitempty"`
}

func (m *UserManagerLogoutReq) Reset()                    { *m = UserManagerLogoutReq{} }
func (m *UserManagerLogoutReq) String() string            { return proto.CompactTextString(m) }
func (*UserManagerLogoutReq) ProtoMessage()               {}
func (*UserManagerLogoutReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *UserManagerLogoutReq) GetUserCheckInfo() *comm.UserCheckInfo {
	if m != nil {
		return m.UserCheckInfo
	}
	return nil
}

type UserManagerAddUserInfoReq struct {
	NewUserInfo *comm.UserInfo `protobuf:"bytes,1,opt,name=newUserInfo" json:"newUserInfo,omitempty"`
}

func (m *UserManagerAddUserInfoReq) Reset()                    { *m = UserManagerAddUserInfoReq{} }
func (m *UserManagerAddUserInfoReq) String() string            { return proto.CompactTextString(m) }
func (*UserManagerAddUserInfoReq) ProtoMessage()               {}
func (*UserManagerAddUserInfoReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *UserManagerAddUserInfoReq) GetNewUserInfo() *comm.UserInfo {
	if m != nil {
		return m.NewUserInfo
	}
	return nil
}

type UserManagerRespComm struct {
	ErrorCode int32  `protobuf:"varint,1,opt,name=ErrorCode,json=errorCode" json:"ErrorCode,omitempty"`
	ErrorMsg  string `protobuf:"bytes,2,opt,name=ErrorMsg,json=errorMsg" json:"ErrorMsg,omitempty"`
}

func (m *UserManagerRespComm) Reset()                    { *m = UserManagerRespComm{} }
func (m *UserManagerRespComm) String() string            { return proto.CompactTextString(m) }
func (*UserManagerRespComm) ProtoMessage()               {}
func (*UserManagerRespComm) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *UserManagerRespComm) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *UserManagerRespComm) GetErrorMsg() string {
	if m != nil {
		return m.ErrorMsg
	}
	return ""
}

type UserManagerRegisterResp struct {
	Comm     *UserManagerRespComm `protobuf:"bytes,1,opt,name=comm" json:"comm,omitempty"`
	UserInfo *comm.UserInfo       `protobuf:"bytes,2,opt,name=userInfo" json:"userInfo,omitempty"`
}

func (m *UserManagerRegisterResp) Reset()                    { *m = UserManagerRegisterResp{} }
func (m *UserManagerRegisterResp) String() string            { return proto.CompactTextString(m) }
func (*UserManagerRegisterResp) ProtoMessage()               {}
func (*UserManagerRegisterResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *UserManagerRegisterResp) GetComm() *UserManagerRespComm {
	if m != nil {
		return m.Comm
	}
	return nil
}

func (m *UserManagerRegisterResp) GetUserInfo() *comm.UserInfo {
	if m != nil {
		return m.UserInfo
	}
	return nil
}

type UserManagerLoginResp struct {
	Comm     *UserManagerRespComm `protobuf:"bytes,1,opt,name=comm" json:"comm,omitempty"`
	UserInfo *comm.UserInfo       `protobuf:"bytes,2,opt,name=userInfo" json:"userInfo,omitempty"`
}

func (m *UserManagerLoginResp) Reset()                    { *m = UserManagerLoginResp{} }
func (m *UserManagerLoginResp) String() string            { return proto.CompactTextString(m) }
func (*UserManagerLoginResp) ProtoMessage()               {}
func (*UserManagerLoginResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *UserManagerLoginResp) GetComm() *UserManagerRespComm {
	if m != nil {
		return m.Comm
	}
	return nil
}

func (m *UserManagerLoginResp) GetUserInfo() *comm.UserInfo {
	if m != nil {
		return m.UserInfo
	}
	return nil
}

type UserManagerLogoutResp struct {
	Comm *UserManagerRespComm `protobuf:"bytes,1,opt,name=comm" json:"comm,omitempty"`
}

func (m *UserManagerLogoutResp) Reset()                    { *m = UserManagerLogoutResp{} }
func (m *UserManagerLogoutResp) String() string            { return proto.CompactTextString(m) }
func (*UserManagerLogoutResp) ProtoMessage()               {}
func (*UserManagerLogoutResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *UserManagerLogoutResp) GetComm() *UserManagerRespComm {
	if m != nil {
		return m.Comm
	}
	return nil
}

type UserManagerAddUserInfoResp struct {
	Comm     *UserManagerRespComm `protobuf:"bytes,1,opt,name=comm" json:"comm,omitempty"`
	UserInfo *comm.UserInfo       `protobuf:"bytes,2,opt,name=userInfo" json:"userInfo,omitempty"`
}

func (m *UserManagerAddUserInfoResp) Reset()                    { *m = UserManagerAddUserInfoResp{} }
func (m *UserManagerAddUserInfoResp) String() string            { return proto.CompactTextString(m) }
func (*UserManagerAddUserInfoResp) ProtoMessage()               {}
func (*UserManagerAddUserInfoResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *UserManagerAddUserInfoResp) GetComm() *UserManagerRespComm {
	if m != nil {
		return m.Comm
	}
	return nil
}

func (m *UserManagerAddUserInfoResp) GetUserInfo() *comm.UserInfo {
	if m != nil {
		return m.UserInfo
	}
	return nil
}

func init() {
	proto.RegisterType((*UserManagerRegisterReq)(nil), "UserManagerRegisterReq")
	proto.RegisterType((*UserManagerLoginReq)(nil), "UserManagerLoginReq")
	proto.RegisterType((*UserManagerLogoutReq)(nil), "UserManagerLogoutReq")
	proto.RegisterType((*UserManagerAddUserInfoReq)(nil), "UserManagerAddUserInfoReq")
	proto.RegisterType((*UserManagerRespComm)(nil), "UserManagerRespComm")
	proto.RegisterType((*UserManagerRegisterResp)(nil), "UserManagerRegisterResp")
	proto.RegisterType((*UserManagerLoginResp)(nil), "UserManagerLoginResp")
	proto.RegisterType((*UserManagerLogoutResp)(nil), "UserManagerLogoutResp")
	proto.RegisterType((*UserManagerAddUserInfoResp)(nil), "UserManagerAddUserInfoResp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for UserManager service

type UserManagerClient interface {
	RegisterUser(ctx context.Context, in *UserManagerRegisterReq, opts ...grpc.CallOption) (*UserManagerRegisterResp, error)
	LoginUser(ctx context.Context, in *UserManagerLoginReq, opts ...grpc.CallOption) (*UserManagerLoginResp, error)
	LogoutUser(ctx context.Context, in *UserManagerLogoutReq, opts ...grpc.CallOption) (*UserManagerLogoutResp, error)
	AddUserInfo(ctx context.Context, in *UserManagerAddUserInfoReq, opts ...grpc.CallOption) (*UserManagerAddUserInfoResp, error)
}

type userManagerClient struct {
	cc *grpc.ClientConn
}

func NewUserManagerClient(cc *grpc.ClientConn) UserManagerClient {
	return &userManagerClient{cc}
}

func (c *userManagerClient) RegisterUser(ctx context.Context, in *UserManagerRegisterReq, opts ...grpc.CallOption) (*UserManagerRegisterResp, error) {
	out := new(UserManagerRegisterResp)
	err := grpc.Invoke(ctx, "/UserManager/RegisterUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagerClient) LoginUser(ctx context.Context, in *UserManagerLoginReq, opts ...grpc.CallOption) (*UserManagerLoginResp, error) {
	out := new(UserManagerLoginResp)
	err := grpc.Invoke(ctx, "/UserManager/LoginUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagerClient) LogoutUser(ctx context.Context, in *UserManagerLogoutReq, opts ...grpc.CallOption) (*UserManagerLogoutResp, error) {
	out := new(UserManagerLogoutResp)
	err := grpc.Invoke(ctx, "/UserManager/LogoutUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagerClient) AddUserInfo(ctx context.Context, in *UserManagerAddUserInfoReq, opts ...grpc.CallOption) (*UserManagerAddUserInfoResp, error) {
	out := new(UserManagerAddUserInfoResp)
	err := grpc.Invoke(ctx, "/UserManager/AddUserInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserManager service

type UserManagerServer interface {
	RegisterUser(context.Context, *UserManagerRegisterReq) (*UserManagerRegisterResp, error)
	LoginUser(context.Context, *UserManagerLoginReq) (*UserManagerLoginResp, error)
	LogoutUser(context.Context, *UserManagerLogoutReq) (*UserManagerLogoutResp, error)
	AddUserInfo(context.Context, *UserManagerAddUserInfoReq) (*UserManagerAddUserInfoResp, error)
}

func RegisterUserManagerServer(s *grpc.Server, srv UserManagerServer) {
	s.RegisterService(&_UserManager_serviceDesc, srv)
}

func _UserManager_RegisterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserManagerRegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagerServer).RegisterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserManager/RegisterUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagerServer).RegisterUser(ctx, req.(*UserManagerRegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManager_LoginUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserManagerLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagerServer).LoginUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserManager/LoginUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagerServer).LoginUser(ctx, req.(*UserManagerLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManager_LogoutUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserManagerLogoutReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagerServer).LogoutUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserManager/LogoutUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagerServer).LogoutUser(ctx, req.(*UserManagerLogoutReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManager_AddUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserManagerAddUserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagerServer).AddUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserManager/AddUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagerServer).AddUserInfo(ctx, req.(*UserManagerAddUserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "UserManager",
	HandlerType: (*UserManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterUser",
			Handler:    _UserManager_RegisterUser_Handler,
		},
		{
			MethodName: "LoginUser",
			Handler:    _UserManager_LoginUser_Handler,
		},
		{
			MethodName: "LogoutUser",
			Handler:    _UserManager_LogoutUser_Handler,
		},
		{
			MethodName: "AddUserInfo",
			Handler:    _UserManager_AddUserInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/userManagerRPC/userManager.proto",
}

func init() { proto.RegisterFile("grpc/userManagerRPC/userManager.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 366 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xb4, 0x54, 0xcd, 0x6a, 0xf2, 0x40,
	0x14, 0x8d, 0xf2, 0x7d, 0xc5, 0xdc, 0xf4, 0x07, 0x6e, 0xfd, 0xeb, 0xb4, 0x0b, 0x19, 0x10, 0x84,
	0xc2, 0x08, 0xb6, 0xab, 0x42, 0x17, 0x12, 0x0a, 0x96, 0x6a, 0x5b, 0x02, 0x3e, 0x80, 0xd5, 0x69,
	0x6a, 0x4b, 0x32, 0x71, 0xa2, 0xf4, 0x51, 0xfa, 0xba, 0x65, 0x46, 0x23, 0x13, 0x99, 0x2c, 0x2a,
	0xb8, 0x51, 0xee, 0xdf, 0xb9, 0x27, 0xe7, 0xe4, 0x06, 0xda, 0xa1, 0x4c, 0xa6, 0xdd, 0x55, 0xca,
	0xe5, 0x68, 0x12, 0x4f, 0x42, 0x2e, 0x83, 0x57, 0xdf, 0x0c, 0x59, 0x22, 0xc5, 0x52, 0x90, 0xb3,
	0xa9, 0x88, 0xa2, 0xae, 0xfa, 0x59, 0x27, 0xe8, 0x33, 0xd4, 0xc7, 0xc6, 0x10, 0x0f, 0xe7, 0xe9,
	0x52, 0xfd, 0x2f, 0xf0, 0x16, 0x4e, 0xd4, 0xbc, 0xff, 0xc1, 0xa7, 0x5f, 0x8f, 0xf1, 0xbb, 0x68,
	0x96, 0x5a, 0xa5, 0x8e, 0xd7, 0x3b, 0x65, 0x63, 0x33, 0x1b, 0xe4, 0x9b, 0xe8, 0x13, 0x9c, 0x1b,
	0x78, 0x43, 0x11, 0xce, 0xe3, 0xfd, 0xc1, 0x86, 0x50, 0xcd, 0x83, 0x89, 0xd5, 0x72, 0x7f, 0xb4,
	0x01, 0x5c, 0x18, 0x68, 0xfd, 0xd9, 0x4c, 0x45, 0xba, 0x91, 0x2f, 0xf0, 0x1a, 0xbc, 0x98, 0x7f,
	0x67, 0x99, 0x0d, 0xa0, 0xcb, 0xb6, 0x2d, 0x66, 0x95, 0xbe, 0xe4, 0x1e, 0x32, 0xe0, 0x69, 0xe2,
	0x8b, 0x28, 0xc2, 0x2b, 0x70, 0x1f, 0xa4, 0x14, 0xd2, 0x17, 0x33, 0xae, 0x11, 0xfe, 0x07, 0x2e,
	0xcf, 0x12, 0x48, 0xa0, 0xa2, 0xab, 0xa3, 0x34, 0x6c, 0x96, 0x5b, 0xa5, 0x8e, 0x1b, 0x54, 0xf8,
	0x26, 0xa6, 0x9f, 0xd0, 0xb0, 0xba, 0x90, 0x26, 0xd8, 0x81, 0x7f, 0xca, 0xae, 0x0d, 0xa3, 0x2a,
	0xb3, 0x2c, 0x0e, 0x74, 0x07, 0xb6, 0xa1, 0xb2, 0xca, 0xf8, 0x97, 0x77, 0xf9, 0x6f, 0x4b, 0x34,
	0xdc, 0x15, 0x55, 0x39, 0x74, 0x88, 0x45, 0x7d, 0xa8, 0x59, 0xdc, 0xfb, 0xcb, 0x26, 0x1a, 0x01,
	0x29, 0xb2, 0xec, 0x00, 0x8c, 0x7b, 0x3f, 0x65, 0xf0, 0x0c, 0x10, 0xf4, 0xe1, 0x38, 0xf3, 0x42,
	0xa5, 0xb1, 0xc1, 0xec, 0xb7, 0x42, 0x9a, 0xac, 0xc0, 0x3e, 0xea, 0xe0, 0x1d, 0xb8, 0x5a, 0x64,
	0x8d, 0x90, 0x23, 0x99, 0x5d, 0x07, 0xa9, 0x31, 0x9b, 0x23, 0xd4, 0xc1, 0x7b, 0x80, 0xb5, 0x6e,
	0x7a, 0x78, 0xb7, 0x6d, 0x7d, 0x0d, 0xa4, 0xce, 0xac, 0x32, 0x53, 0x07, 0x07, 0xe0, 0x19, 0x9a,
	0x21, 0x61, 0x85, 0xef, 0x3f, 0xb9, 0x64, 0xc5, 0x42, 0x53, 0xe7, 0xed, 0x48, 0x7f, 0x2d, 0x6e,
	0x7e, 0x03, 0x00, 0x00, 0xff, 0xff, 0x47, 0xfe, 0x18, 0xbe, 0x67, 0x04, 0x00, 0x00,
}
